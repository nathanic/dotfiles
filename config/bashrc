# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# play nice with others
umask 002

# we want neovim if we can find it, else vim
#if [[ -f /usr/bin/nvim ]]; then
#    export EDITOR=/usr/bin/nvim
#elif [[ -f /usr/bin/vim ]]; then
#    export EDITOR=/usr/bin/vim
#fi
# otherwise system default $EDITOR :-/

# various paths
export CPATH=~/local/include:$CPATH
export JAVA_HOME=~/local/jdk-8
export ANDROID_HOME=~/local/android-sdk-linux
export PYTHONPATH=~/lib/python

# prefix a path onto $PATH if it exists
cons_path() { 
    [ -d "$1" ] && export PATH="$1:$PATH" 
}

cons_path /var/lib/gems/1.8/bin
cons_path ~/local/slic3r/bin
cons_path ~/local/perl5/bin
cons_path ~/local/apache-jmeter/bin
cons_path ~/local/idea/bin
cons_path ~/local/glassfish3/bin
cons_path ~/local/arduino
cons_path ~/local/android-studio/bin
cons_path ~/local/android-sdk-linux/tools
cons_path ~/local/android-sdk-linux/platform-tools
cons_path ~/local/racket/bin
cons_path ~/local/rust/bin
cons_path ~/local/node/bin
cons_path ~/local/emacs/bin
cons_path ~/local/oc
cons_path ~/.cabal/bin
cons_path $JAVA_HOME/bin
cons_path ~/.local/bin
cons_path ~/dotfiles/bin
cons_path ~/bin

# haskell stack bash completion support
if [ -x $(which stack) ]; then
	eval "$(stack --bash-completion-script stack)"
fi

if [ -d "~/local/perl5" ]; then
    export PERL5LIB="$HOME/local/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
    export PERL_LOCAL_LIB_ROOT="$HOME/local/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
    export PERL_MB_OPT="--install_base \"$HOME/local/perl5\""
    export PERL_MM_OPT="INSTALL_BASE=$HOME/local/perl5"
fi

######################################################################
# Interactive-Only Configuration Below This Point
[ -z "$PS1" ] && return

# ensure my personal tmp exists
[ -d ~/tmp/ ] || mkdir ~/tmp

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
[ -f /etc/bash_completion ] && . /etc/bash_completion

# don't put duplicate lines in the history. 
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth
export HISTIGNORE="[   ]*:&:bg:fg:exit"

### shell options
# see http://wiki.bash-hackers.org/internals/shell_options

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell

# don't overwrite .bash_history
shopt -s histappend

# TODO maybe enable this, be careful with other $PROMPT_COMMAND in .bash_prompt
# sync history between bashes http://briancarper.net/blog/248/
#export PROMPT_COMMAND="history -a; history -n"

shopt -s no_empty_cmd_completion
shopt -s shift_verbose
#shopt -s checkhash

# enable recursive globbing for **
shopt -s globstar

# disable annoying console beep
[ -x setterm ] && setterm -blength 0

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"
[ -x $HOME/bin/lesspipe.sh ] && eval "$($HOME/bin/lesspipe.sh)"
export LESS_ADVANCED_PREPROCESSOR=yes
export LESS=-R

# but prefer vimpager if available
if [[ -x $HOME/bin/vimpager ]]; then
    export PAGER=$HOME/bin/vimpager
    alias less=$PAGER
    alias zless=$PAGER
fi

# do partial history search by default with arrow keys
bind '"\e[A"':history-search-backward
bind '"\e[B"':history-search-forward

if [ -f ~/.bash_prompt ]; then
    . ~/.bash_prompt
else
    # basic prompt fallback if we can't find the prompt script
    PS1='${prefix}\u@\h:\w\$ '
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# keychain ssh key management (non-interactive)
# TODO: just detect the files?  maybe keychain can auto-add.
if [ -x "$(which keychain 2> /dev/null)" ]; then  
    # i really need to clean up my key filenames...
    keychain --quiet --ignore-missing \
        ~/.ssh/id_rsa                 \
        ~/.ssh/id_dsa                 \
        ~/.ssh/github.id_dsa          \
        ~/.ssh/nathan_github.dsa      \
        ~/.ssh/id_dsa.xenkibbutz-new  \
        ~/.ssh/nathan-gitolite.dsa

        # ~/.ssh/id_dsa.xenkibbutz      

    . ~/.keychain/${HOSTNAME}-sh
fi

# automatically invoke a terminal multiplexer if we're not in a session already
# used to also check [[ -z "$DISPLAY" ]] to prevent it on local xterms
# but now i pretty much always want it if i can get it.
if [[ -z "$TMUX" ]] && [[ "$TERM" != screen* ]]; then
    if [ -x "$(which tmux)" ]; then
        tmux attach -t sys || tmux new -s sys
    elif [ -x "$(which screen)" ]; then
        screen -xRR
    else
        echo "WARNING: no terminal multiplexer could be found, so you're on your own"
    fi
fi



