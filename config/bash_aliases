# some handy bash aliases and functions, which outgrew my bashrc
# vi:ft=sh

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='ls --color=auto --format=vertical'
    #alias vdir='ls --color=auto --format=long'
fi

# common variants of ls
alias ll='ls -l'
alias lh='ls -lh'
alias lls='ls -lhSr'
alias llh='ls -lh'
alias la='ls -A'
alias l='ls -CF'

alias lsblk='lsblk --output NAME,FSTYPE,MOUNTPOINT,LABEL,MODEL,SIZE,STATE,TYPE'
alias d0='export DISPLAY=:0'
alias d10='export DISPLAY=localhost:10.0'

# 'less' passes ANSI colors
alias less='less -R'

# change to the top level directory of the nearest enclosing git repo
alias cdgr='cd $(git rev-parse --show-toplevel)'

alias updatebashrc='exec bash --login'

# useful for piping things in and out of
# e.g.:   grep foo * | ccopy
alias cpaste='xclip -selection clipboard -out'
alias ccopy='xclip -selection clipboard'

alias tmux-put='tmux set-buffer \"$(xclip -selection clipboard -o)\"; tmux paste-buffer'
alias tmux-yank='tmux show-buffer | xclip -i -selection clipboard'

alias dap='dcop amarok player'
alias amadd='dcop amarok playlist addMedia'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
# alias alert='play --silent /usr/share/sounds/phone.wav'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# generate some concentration-enhancing(?) brown noise with sox
# from interesting hn thread https://news.ycombinator.com/item?id=5872414
alias brownnoise='play --show-progress -c 2 --null synth brownnoise reverb bass 6 treble -3 echos 0.8 0.9 1000 0.3 1800 0.25'
alias warpcore='play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25 fade h 1 864000 1'
alias warpcore2='play -c2 -n synth whitenoise band -n 100 24 band -n 300 100 gain +20'
alias podracer='play -c2 -n synth whitenoise tremolo 8 70 flanger band -n 100 80 band -n 850 100 gain +20'

# generate random music from /dev/urandom
randmusic-minor () {
    cat /dev/urandom | hexdump -v -e '/1 "%u\n"' | awk '{ split("0,2,3,5,7,8,10,12",a,","); for (i = 0; i < 1; i+= 0.0001) printf("%08X\n", 100*sin(1382*exp((a[$1 % 8]/12)*log(2))*i)) }' | xxd -r -p | aplay -c 2 -f S32_LE -r 16000
}

# ds will print a nice disk usage summary.  
# dsraw will do it without human-readable file sizes
alias dsraw='du -xs * | sort -n'   # find the piggies
alias ds='du -sx * | sort -n | cut -f 2- | while read a; do du -hs "$a"; done' 
alias dfh='df -h .'             # "dee eff here"

# also interesting: http://princ3.wordpress.com/2007/01/28/exclude-directories-from-find/

alias moutn=mount
alias grep='grep --color'
alias cgrep='grep --color=always'  # for use with pipes like less

# C/C++ ack
alias cack='ack --cc --cpp'
# ack into less
alias ackl='ack --pager="less -R"'
# C/C++ ack into less
alias cackl='ack --cc --cpp --pager="less -R"'

# be 'nice' about both io scheduling and CPU scheduling
# $ verynice <command>
alias verynice='ionice -c3 nice'

# remote copy (interactive); uses args like scp
# can resume partial transfers, but requires remote rsync
# note that -a means preserve attribs and do not follow symlinks
# add --bwlimit=N to limit to N kbyte/sec
alias rcopy='rsync -ar --partial --progress'
alias slowcopy='rsync --bwlimit=1000 -a --rsh=ssh --partial --progress'


# incredibly simple single-file webserver
jankserve() { while true; do { echo -e 'HTTP/1.1 200 OK\r\n'; cat "$1"; } | nc -l 8080; done }

kdeunlock() { 
    qdbus | grep kscreenlocker_greet | xargs -I {} qdbus {} /MainApplication quit 
}

# http://blog.sanctum.geek.nz/watching-with-tmux/
function tmw {
    tmux split-window -dh "$*"
}


# functional style "apply cmd arg0 [arg1 [...]]"
# -> cmd arg0; cmd arg1; ...
function apply () {
    cmd=$1
    shift
    for x in $*; do $cmd $x; done
}

# set the xterm window title (well, konsole tab title)
function settitle() { echo -ne "\e]2;$@\a\e]1;$@\a"; }

# http://brettterpstra.com/2013/03/14/more-command-line-handiness/
# ls archives (inspired by `extract`)
lsz() {
	if [ $# -ne 1 ]
	then
		echo "lsz filename.[tar,tgz,gz,zip,etc]"
		return 1
	fi
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2|*.tar.gz|*.tar|*.tbz2|*.tgz) tar tvf $1;;
			*.zip)  unzip -l $1;;
			*)      echo "'$1' unrecognized." ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained
nicemount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2=$4="";1') | column -t; }

# fun times: look something up on wikipedia via DNS query
wiki() { dig +short txt $1.wp.dg.cx; }


# http://mmb.pcb.ub.es/~carlesfe/unix/tricks.txt
function lt() { ls -ltrsa "$@" | tail; }
#function psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
function fname() { find . -iname "*$@*"; }


# http://brettterpstra.com/2010/03/06/fk-redux/
# TODO needs some reworking for GNU ps, this assumes BSD style!
fp () { #find and list processes matching a case-insensitive partial-match string
		ps Ao pid,comm|awk '{match($0,/[^\/]+$/); print substr($0,RSTART,RLENGTH)": "$1}'|grep -i $1|grep -v grep
}

fk () { 
	IFS=$'\n'
	PS3='Kill which process? (1 to cancel): '
	select OPT in "Cancel" $(fp $1); do
		if [ $OPT != "Cancel" ]; then
			kill $(echo $OPT|awk '{print $NF}')
		fi
		break
	done
	unset IFS
}

# http://www.commandlinefu.com/commands/view/6871/view-all-processess-cmdlines-and-environments
aa_ps_all () { ( cd /proc && command ps -A -opid= | xargs -I'{}' sh -c 'test $PPID -ne {}&&test -r {}/cmdline&&echo -e "\n[{}]"&&tr -s "\000" " "<{}/cmdline&&echo&&tr -s "\000\033" "\nE"<{}/environ|sort&&cat {}/limits' ); }

# jump-around script  https://github.com/rupa/z
[[ -f ~/dotfiles/bin/z.sh ]] && source ~/dotfiles/bin/z.sh

ddgip() {
    lynx -dump https://duckduckgo.com/?q=ip | grep "Your IP address is "
}

# produce some dazzling colors on the terminal. you'll probably want to run `reset` afterward.
alias dazzle='while :;do printf "\e[%d;%dH\e[48;5;%dm \e[0m" $(($RANDOM%$LINES)) $(($RANDOM%$COLUMNS)) $(($RANDOM%216 )); done'

genpasswd() {
    local l=$1
    [ "$l" == "" ] && l=16
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}


vim() {
    if [[ -f $(which nvim) ]]; then
        nvim $*
    else
        `which vim` $*
    fi
}

authed_keys() {
    local fn=$1
    [ "$fn" == "" ] && fn="$HOME/.ssh/authorized_keys"
    cat "$fn" | xargs -n1 -I% bash -c 'ssh-keygen -l -f /dev/stdin <<<"%"' 
}

