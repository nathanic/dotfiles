""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nathan's vimrc -- There are many like it, but this one is mine.


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin management with Vundle
set nocompatible               " be iMproved
filetype off                   " required for vundle stuff

" don't complain if there's no ctags
if !executable('exuberant-ctags') && !executable('ctags')
    let loaded_taglist = 'no'
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"""" let Vundle manage Vundle
Bundle 'gmarik/vundle'

"""" general editor plugins
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-characterize'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-repeat'
Bundle 'bufexplorer.zip'
Bundle 'kien/ctrlp.vim'
Bundle 'tomtom/tcomment_vim'
Bundle 'Align'
Bundle 'a.vim'
Bundle 'gcmt/wildfire.vim'
" or get tagbar instead?
Bundle 'taglist.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-vinegar'

"""" neovim-specific plugins
if has("nvim")
    Bundle 'cazador481/fakeclip.neovim'
    Bundle 'Shougo/deoplete.nvim'
    Bundle 'eagletmt/neco-ghc'
endif

" Others I'm considering
"Bundle 'tpope/abolish'
"Bundle 'tpope/vim-sleuth'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}

"""" web dev and other syntax support
Bundle 'othree/html5.vim'
Bundle 'indenthtml.vim'
Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'kchmck/vim-coffee-script'
Bundle 'vim-pandoc/vim-pandoc'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'puppetlabs/puppet-syntax-vim'
" Bundle 'honza/dockerfile.vim'
" Bundle 'xml.vim'
" Bundle 'armyofevilrobots/vim-openscad'
Bundle 'sirtaj/vim-openscad'
Bundle 'ekalinin/Dockerfile.vim'

"""" outlining tools
Bundle 'vimoutliner/vimoutliner'
Bundle 'VOoM'
Bundle 'insanum/votl'

"""" clojure stuff
"http://clojure-doc.org/articles/tutorials/vim_fireplace.html
Bundle 'tpope/vim-fireplace'
"TODO: check out vim-redl https://github.com/dgrnbrg/vim-redl
Bundle 'guns/vim-clojure-static'
" Bundle 'tpope/vim-classpath'
Bundle 'paredit.vim'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'typedclojure/vim-typedclojure'

"""" haskelly wabbits
Bundle 'lukerandall/haskellmode-vim'
Bundle 'bitc/vim-hdevtools'
Bundle 'eagletmt/ghcmod-vim'
Bundle 'eagletmt/neco-ghc'
" alternative haskell thing i was checking out
" Bundle 'dag/vim2hs'

"""" purescript!
Bundle 'raichoo/purescript-vim'
Bundle 'frigoeu/psc-ide-vim'

"""" misc language interaction
" general async support
Bundle 'Shougo/vimproc.vim'
" rust support
Bundle 'wting/rust.vim'
" good syntax checker
Bundle 'scrooloose/syntastic'
" generic repl integration
Bundle 'jpalardy/vim-slime'
" supercollider repl integration
Bundle 'sbl/scvim'
"Bundle 'Superior-Haskell-Interaction-Mode-SHIM'
Bundle 'tclem/vim-arduino'
Bundle 'JuliaLang/julia-vim'
" Bundle 'sophacles/vim-processing'
Bundle 'vim-ruby/vim-ruby'
Bundle 'lambdatoast/elm.vim'

"""" git support
Bundle 'tpope/vim-fugitive'
" i'm very sad to have to disable this one
" but it was breaking my gvim's ability to yank to the clipboard
" TODO: try one of the alternatives mentioned in vim-gitgutter's README
" Bundle 'airblade/vim-gitgutter'

"""" misc tool interaction
Bundle 'mileszs/ack.vim'
Bundle 'gnupg.vim'
Bundle 'tpope/vim-tbone'
" need to do some tmux reconfig for the below to work
" Bundle 'christoomey/vim-tmux-navigator'

"""" color schemes
" (commenting out the ones i'm not using at the moment to simplify the rtp)
" Bundle 'junegunn/seoul256.vim'
" Bundle 'ciaranm/inkpot'
" Bundle 'tomasr/molokai'
Bundle 'nanotech/jellybeans.vim'
Bundle 'altercation/vim-colors-solarized'
" Bundle 'sjl/badwolf'
" Bundle 'Lokaltog/vim-distinguished'
" Bundle 'jnurmine/Zenburn'
Bundle 'vilight.vim'
"Bundle 'tpope/vim-vividchalk'
" Bundle 'andyferra/vim-vividchalk'
" TODO: switch to https://github.com/flazz/vim-colorschemes

filetype plugin indent on
" vundle time is over, back to regularly-scheduled vim config

set history=1000        " longer command history
set undolevels=1000     " so much undo
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set hlsearch            " highlight search matches
set smartcase           " search case-insensitive if all lower
set visualbell t_vb=    " i hate beeping!
set noerrorbells        " still hate beeping!
set hidden              " hide rather than delete buffers
set autochdir           " change to the directory of the active buffer
set showmatch           " show matching parens
set backspace=indent,eol,start  " backspace everything in insert mode
set title               " change terminal title
set scrolloff=4         " keep 4 lines off the edges of the screen when scrolling
set virtualedit=block   " allow movement into virtual space when in block mode

set splitbelow          " new split windows below old ones
set splitright          " new vsplits to the right
set shiftround          " round to nearest multiple of shiftwidth

set statusline=%F%m%r%h%w\ %{&ff}\ %{&ft}\ %P\ (%l,%v)\ %{fugitive#statusline()}
set laststatus=2        " always show status line

" put swap files in my personal tmp dir
" the double slash means that vim should use full paths,
" subbing % for /.  ~/tmp/%home%nathan%example
set directory=~/tmp//
set backupdir=~/tmp//   " keep *~ out of .

set mouse=              " disable mouse usage in terminal

set wildmenu            " show a listing of wildcard completions
set wildmode=longest,full " make completion more bash-like
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o
" ignore case when completing filenames and directories when supported
if v:version > 703 || (v:version == 703 && has("patch72"))
    set wildignorecase
endif

" use gui clipboard if available
if has("unnamedplus")
    " directly use clipboard register when supported (X11 only)
    " set clipboard+=unnamedplus
else
    set clipboard+=unnamed
endif

set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set nolist                      " don't show invisible characters by default,
                                " but it is enabled for some file types (see later)

set virtualedit=block " allow cursor to move past last character in block mode

" prevent jumping over wrapped lines
nnoremap <silent> j gj
nnoremap <silent> k gk

" redraw window so search terms are centered
" nnoremap n nzz
" nnoremap N Nzz

" python, haskell, and softtabstop have made me a spaces man
set autoindent
set copyindent          " preserve structure of previous indent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab           " write spaces instead of \t
set smarttab
"set foldmethod=syntax
set foldmethod=marker
set foldlevel=99
set matchpairs+=<:>

set pastetoggle=<f11>   " quick toggle for paste mode

if &t_Co > 2 || has("gui_running")
    syntax on          " enable syntax highlighting
endif

if &t_Co > 16 || has("gui_running")
    " only looks good if we have enough colors
    set cursorline
    set cursorcolumn
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration variables for plugins and such

" TODO: check platform, existence of binaries, etc.
let g:haddock_browser = "firefox"
" let g:haddock_indexfiledir = "~/.vim/"


" huzzah for doxygen
let g:load_doxygen_syntax=1

" don't spam me for not having ruby
let g:LustyExplorerSuppressRubyWarning = 1

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
let &guioptions = substitute(&guioptions, "t", "", "g")
" also just ditch the toolbar, since it adds nothing to a keyboard-driven app
let &guioptions = substitute(&guioptions, "T", "", "g")

" Settings for VimClojure
let g:vimclojure#HighlightBuiltins=1
let g:vimclojure#ParenRainbow=1

" SLIMV and paredit config
let g:slimv_leader=','

" default 500 -- too much is noticably slow to the point where i miss keys
" right after parentheses...
" let g:paredit_matchlines=1000
let g:paredit_electric_return=1

" for vim-slime
let g:slime_target = "tmux"

" TODO might want to just target lispy langs with this
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['yellow',      'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto Commands
if has("autocmd")
    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        " For all text files set 'textwidth' to 78 characters.
        autocmd FileType text setlocal textwidth=78

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif
    augroup end

    augroup invisible_chars "{{{
        au!

        " Show invisible characters in all of these files
        autocmd filetype vim,c,cpp,perl,haskell,make,python,rst,ruby setlocal list
        autocmd filetype javascript,css,clojure setlocal list
    augroup end "}}}

    "http://www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/Vim/vim.html
    " au BufEnter *.hs compiler ghc

    " support MASI::Template files as html
    au BufNewFile,BufReadPost *.thtml setl filetype=html

    au BufNewFile,BufReadPost Vagrantfile setl filetype=ruby


    " Highlight TODO, FIXME, NOTE, etc.
    " inspired by, but an improvement upon http://stackoverflow.com/questions/6577579/task-tags-in-vim
    if v:version > 701
        autocmd Syntax * call matchadd('Todo',  '\(^\|\W\zs\)\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)\(:\|\)')
        autocmd Syntax * call matchadd('Debug', '\(^\|\W\zs\)\(NOTE\|INFO\|IDEA\)\(:\|\)')
    endif


    augroup cursorlines
        autocmd WinEnter * setlocal cursorline | setlocal cursorcolumn
        autocmd WinLeave * setlocal nocursorline | setlocal nocursorcolumn
    augroup end

    " use ghc-mod to check haskell files on write
    autocmd BufWritePost *.hs GhcModCheckAndLintAsync

endif " has("autocmd")


" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
"         \ | wincmd p | diffthis

" improved DiffOrig from acx0
" TODO: break this out into its own plugin
nnoremap <Leader>do :call DiffOrig()<cr>
command! DiffOrig :call DiffOrig()
function! DiffOrig()
    if !exists("b:diff_active") && &buftype == "nofile"
        echoerr "E: Cannot diff a scratch buffer"
        return -1
    elseif expand("%") == "" || !filereadable(expand("%"))
        echoerr "E: Buffer doesn't exist on disk"
        return -1
    endif

    if !exists("b:diff_active") || b:diff_active == 0
        let b:diff_active = 1
        let l:orig_filetype = &l:filetype

        leftabove vnew
        let t:diff_buffer = bufnr("%")
        set buftype=nofile

        read #
        0delete_
        let &l:filetype = l:orig_filetype

        diffthis
        wincmd p
        diffthis
    else
        diffoff
        execute "bdelete " . t:diff_buffer
        let b:diff_active = 0
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Keystrokes

" keys that are not mapped to anything useful that could be handy for
" remapping: H, L

" it's the default, but let's be clear
let mapleader="\\"
let maplocalleader=","

" nice tab navigation  (these need work...)
nnoremap <s-left> :tabprevious<cr>
nnoremap <s-right> :tabnext<cr>

" f4 and f3 to go forward and backards in errors/greps
nnoremap <f4> :cn<cr>
nnoremap <f3> :cp<cr>

" <c-]> jumps to the tag under the cursor;
" <c-\> is my analogue for using :ptag
nnoremap <c-\> :exe "silent! ptag " . expand("<cword>")<cr>

" Quick yanking to the end of the line
nnoremap Y y$

" Yank/paste to the OS clipboard with ,y and ,p
nnoremap <leader>y "+y
nnoremap <leader>Y "+yy
nnoremap <leader>p "+p
nnoremap <leader>P "+P

" quick access to tmux buffer
nnoremap <leader>t :Tyank<cr>
nnoremap <leader>T :Tput<cr>

" select recent pasted text (for indenting etc.)
nnoremap <leader>v V`]

" run Ack fast
nnoremap <leader>a :Ack<Space>

" quick change buffers
noremap <C-j> :bprev<CR>
noremap <C-k> :bnext<CR>

" Easy window navigation
noremap <A-h> <C-w>h
noremap <A-j> <C-w>j
noremap <A-k> <C-w>k
noremap <A-l> <C-w>l

" make a new vertical split and go there
nnoremap <leader>w <C-w>v<C-w>l

" cycle thru preview tags
" inspired by http://www.ashberg.de/vim/vimrc.html
noremap <C-PageUp> :ptp<cr>
noremap <C-PageDown> :ptn<cr>
inoremap <C-PageUp> <esc>:silent! ptp<cr>a
inoremap <C-PageDown> <esc>:silent! ptn<cr>a

" Don't use Ex mode, use Q for formatting
noremap Q gq

" Insert a blank line below the current line in normal mode.
" Handy because it won't continue code comments.
nnoremap <space> :put =''<cr>

" IDE-ish plugins
nnoremap <F1>  :NERDTreeToggle<cr>
nnoremap <F2>  :TagbarToggle<cr>

" remove trailing whitespace
nnoremap _$ :call PreservePosition("%s/\\s\\+$//e")<CR>

" santa's little helper
function! PreservePosition(command)
" save last search, and cursor position
    let l:search = @/
    let l:line = line(".")
    let l:column = col(".")

    execute a:command
" restore previous search history, and cursor position
    let @/ = l:search
    call cursor(l:line, l:column)
endfunction

" filter through xml tidy (must be available on path)
" select xml text in visual mode to use
vnoremap ,x :!tidy -q -i --indent-spaces 4 -wrap 0 -xml<CR>
nnoremap ,x :%!tidy -q -i --indent-spaces 4 -wrap 0 -xml<CR>

" alternatively
"nnoremap ,X silent %!xmllint --encode UTF-8 --format -

" dons' haskell typeOf script
" nnoremap ty yy:.!typeOf -fbang-patterns -ignore-dot-ghci %

" reload current clojure file into repl (vim-fireplace)
nnoremap <f10> :w<cr>:Require<cr>

" emergency stop for overtone synthesizer (vim-fireplace)
" nnoremap <f12> :call SlimvEval(["(stop)"])<cr>
nnoremap <f12> :Eval (stop)<cr>

" pretty-print the last repl result in fireplace.vim
nnoremap ,p :Eval (clojure.pprint/pp)<cr>

" support :W for :w -- I fat-finger this all the time
command! W w 

" write to root-owned file when running as non-root
command! Wsudo write !sudo tee % > /dev/null

" quickly make a file into a vim-outliner file:
    " set filetype,
    " insert modeline to set filetype (at current cursor pos)
    " replace spaces with literal tabs required by vim-outliner
command Vo set ft=vo_base | put ='vi:ft=vo_base' | %s/    /\t/g

" clean up buffer list by wiping out unmodified, hidden, no name buffers
nnoremap <Leader>de :call RemoveEmptyBuffers()<CR>

function! RemoveEmptyBuffers()
    let s:empty_buffers = filter(range(1, bufnr("$")),
                \ "buflisted(v:val) && empty(bufname(v:val)) && bufwinnr(v:val) < 0 && !getbufvar(v:val, '&mod')")

    if !empty(s:empty_buffers)
        execute "bwipeout " . join(s:empty_buffers, " ")
    endif
endfunction

" append modeline after last line in buffer
nnoremap <Leader>ml :call AppendModeline()<CR>

function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sts=%d sw=%d %s :",
                \ &l:tabstop, &l:softtabstop, &l:shiftwidth, &l:expandtab ? "et" : "noet")
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), "")
    call append(line("$"), l:modeline)
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Abbreviations


" quickly mark a file as vim outliner format
iab ftvo vi:ft=vo_base

" insert YYYY-MM-DD
iab <expr> _dt strftime("%F")

" insert HH:MM
iab <expr> _tt strftime("%T")

" insert YYYY-MM-DD HH:MM
iab <expr> _dtt strftime("%F %T")

" insert an integral symbol
iab _intg ∫

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" visual settings

set t_Co=256
" colorscheme gardener
" gardener is pretty but the hlsearch color needs to be red imho
" but beware of how it would interact with cygwin or other crap terminals

if $TERM == "screen"
    " koehler always looks good in a basic terminal 
    colorscheme koehler
else
    " jellybeans is great in gvim or 256 color terminal
    colorscheme jellybeans
end

" vilight is nice but has problems such as diff mode
"colorscheme vilight


" this looks good on my x11 on hugin at least.
set guifont=Monospace\ 11
"set guifont=DejaVu\ Sans\ Mono\ 13


" highlight the word under cursor
"highlight flicker cterm=bold ctermfg=white
"au CursorMoved <buffer> exe 'match flicker /\V\<'.escape(expand('<cword>'), '/').'\>/'

" highlight chars that go over the 80-column limit
" inspired by http://drupal.org/node/29325#comment-213746
"highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
"match OverLength '\%81v.*'


" \l to toggle highlighting long lines
nnoremap <silent> <Leader>o
\ :if exists('w:long_line_match') <Bar>
\   silent! call matchdelete(w:long_line_match) <Bar>
\   unlet w:long_line_match <Bar>
\ elseif &textwidth > 0 <Bar>
\   let w:long_line_match = matchadd('ErrorMsg', '\%>'.&tw.'v.\+', -1) <Bar>
\ else <Bar>
\   let w:long_line_match = matchadd('ErrorMsg', '\%>80v.\+', -1) <Bar>
\ endif<CR>




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" prose writing (ganked from acx0)
" TODO: break this out into its own plugin
" modes:
" notes - hard wrap at 78 characters, don't reformat text after changes
" email - hard wrap at 78 characters, reformat text after changes
" essay - soft wrap at end of line (for copying to other word processors)
let g:default_prose_mode = "notes"

nnoremap <Leader>tp :call ToggleProse()<CR>

function! ToggleProse()
    if exists("b:prose_mode") && b:prose_mode != "off"
        call SetProse("off")
    else
        call SetProse(g:default_prose_mode)
    endif
endfunction

command! -nargs=1 SetProse call SetProse(<f-args>)
function! SetProse(mode)
    if !exists("b:prose_mode")
        let b:prose_mode = a:mode
        let b:old_formatoptions = &formatoptions
        let b:old_textwidth = &textwidth
    endif

    setlocal nonumber
    setlocal wrap
    " setlocal spell

    if a:mode == "notes"
        setlocal textwidth=78
        setlocal formatoptions=tcq
    elseif a:mode == "email"
        setlocal textwidth=72
        setlocal formatoptions=tcqa
    elseif a:mode == "essay"
        setlocal linebreak
        setlocal formatoptions=q
    else
        setlocal number
        setlocal nospell
        setlocal nolinebreak

        let &l:textwidth = b:old_textwidth
        let &l:formatoptions = b:old_formatoptions

        if a:mode != "off"
            echoerr "E: Prose mode '" . a:mode . "' not defined"
            return -1
        endif
    endif

    let b:prose_mode = a:mode
    echo a:mode == "off" ? "noprose" : " prose (" . a:mode . ")"
endfunction



" TODO: harvest more good ideas from these
" http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
" http://nvie.com/posts/how-i-boosted-my-vim/
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" " this doesn't seem to work well..
" function! MyVotlColors()
"     highlight OL1 ctermfg=lightblue
"     highlight OL2 ctermfg=red
"     highlight OL3 ctermfg=brown
"     highlight OL4 ctermfg=yellow
"     highlight OL5 ctermfg=lightblue
"     highlight OL6 ctermfg=red
"     highlight OL7 ctermfg=brown
"     highlight OL8 ctermfg=yellow
"     highlight OL8 ctermfg=white
" 
"     " color for body text
"     for i in range(1, 9)
"         execute "highlight BT" . i . " ctermfg=lightgreen"
"     endfor
" 
"     " ...etc...
" endfunction
" autocmd FileType votl call MyVotlColors()


" let g:syntastic_haskell_checkers = ['ghc-mod']
